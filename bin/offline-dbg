#!/bin/bash

set -eu

SCRIPT=`realpath -s $0`
SCRIPT_PATH=`dirname $SCRIPT`
CONTAINER_PATH=${SCRIPT_PATH}/../containers/ovs-dbg

OVN_NAMESPACE=ovn-kubernetes
WORKDIR=${OVS_DBG_WORKDIR:-/tmp/ovs-offline-dbg}
VAR_RUN=${WORKDIR}/var-run

declare -A open_flow_protocols=(
    [0x1]=OpenFlow10
    [0x2]=OpenFlow11
    [0x3]=OpenFlow12
    [0x4]=OpenFlow13
    [0x5]=OpenFlow14
    [0x6]=OpenFlow15
)

usage() {
    echo "$0 [OPTIONS] COMMAND [COMMAND_OPTIONS]"
    echo ""
    echo "Debug OVS by recreating an environment offline"
    echo ""
    echo "Available commands:"
    echo "  build                Builds the needed container images"
    echo "  collect-k8s NODE     Collects information from a running k8s node and saves it in the working directory"
    echo "    Options":
    echo "       -o:    Openshift environment"
    echo ""
    echo "  collect-sos SOS      Collects information from the provided sos.tar.xz and saves it in the working directory"
    echo "  collect-db  DBFILE   Collects the provided database file and prepares it for offline debugging"
    echo ""
    echo "  start [SERVICE]      Starts an offline debugging session service. hData must have been previously collected in the working directory"
    echo "                       Supported services: ovsdb, vswitchd, all(default)"
    echo ""
    echo "  stop                 Stops the offline debugging environment"
    echo ""
    echo "  print                Prints the available information found in the working directory"
    echo ""
    echo "Generic options"
    echo "  -h:     Print help"
    echo "  -w:     Set working directory. Also configurable via OVS_DBG_WORKDIR env var. Default: /tmp/ovs-offline-dbg"
    echo "  -d:     Set debug mode"
}

error() {
    echo "Error: $@"
    exit 1
}

do_build() {
    echo "Offline OVS Debugging: building images"
    echo "***************************************"

    docker build -t ovs-dbg -f ${CONTAINER_PATH}/Dockerfile ${CONTAINER_PATH}
}

do_stop() {
    docker kill ovsdb-server &>/dev/null || true
    docker kill ovs-vswitchd &>/dev/null || true
    docker rm ovsdb-server &>/dev/null || true
    docker rm ovs-vswitchd &>/dev/null || true
    rm -rf ${WORKDIR}
    echo "Offline OVS Debugging stopped"
    echo "*****************************"
}

process_dbfile() {
    local orig_dbfile=$1
    local final_dbfile=$WORKDIR/final.db
    if [ -f ${final_dbfile} ]; then
        echo "Warning, overwriting DB file $final_dbfile"
    fi
    ovs
}

do_collect-db() {
    local orig_dbfile=$1
    cp $orig_dbfile $WORKDIR/db.conf
    echo ""
    echo ""
    echo "Offline OVS Debugging: DB file collected and stored in ${WORKDIR}"
    echo "*****************************************************************"
}

do_collect-k8s() {
    OPTIND=1
    while getopts "oh" opt; do
        case ${opt} in
            h)
                usage
                exit 0
                ;;
            o)
                OVN_NAMESPACE=openshift-ovn-kubernetes
                ;;
        esac
    done
    shift $(((OPTIND -1)))

    if [ $# -lt 1 ]; then
        usage
        exit 1
    fi
    NODE=$1
    kubectl get node $NODE || error "Node not found"

    ovnkube_node=$(kubectl get pods -n $OVN_NAMESPACE --field-selector spec.nodeName=$NODE -o name | head -1 | sed "s/^.\{4\}//")


    # Collect the flows and groups for future restoration using ovs-save
    bridges=$(kubectl exec -n $OVN_NAMESPACE $ovnkube_node -- ovs-vsctl -- --real list-br)
    kubectl exec -it -n $OVN_NAMESPACE $ovnkube_node -- sh -c "/usr/share/openvswitch/scripts/ovs-save save-flows $(echo $bridges | xargs) > /tmp/restore.sh"
    kubectl cp -n $OVN_NAMESPACE $ovnkube_node:/tmp/restore.sh ${WORKDIR}/restore_flows/do_restore.sh

    save_dir=$(cat ${WORKDIR}/restore_flows/do_restore.sh | awk '/replace/{print $6; exit}' | xargs dirname)
    kubectl cp -n $OVN_NAMESPACE $ovnkube_node:$save_dir ${WORKDIR}/restore_flows
    cat <<EOF > ${WORKDIR}/restore_flows/restore.sh
CURR_DIR=\$(dirname \$(realpath \$0))
ln -s \$CURR_DIR $save_dir
sh \$CURR_DIR/do_restore.sh
EOF
    # Currently, there is a bug in OVS (https://bugzilla.redhat.com/show_bug.cgi?id=1982743)
    # that makes it print malformed flows. This is a workaround just in case the running OVS version is not yet
    # fixed
    for file in $(ls -x $WORKDIR/restore_flows/*flows.dump); do
        sed -i 's/igmp,/ip,nw_proto=2,/g' $file
    done
    # The final line generated by ovs-save removes the directory were the flows are stored. Just don't do it
    sed -i '/rm.*/d' $WORKDIR/restore_flows/do_restore.sh

    # Collect the DB backup
    mkdir -p $VAR_RUN
    kubectl exec -i -n $OVN_NAMESPACE $ovnkube_node ovsdb-client backup > ${WORKDIR}/db.conf

    echo ""
    echo ""
    echo "Offline OVS Debugging: data collected and stored in ${WORKDIR}"
    echo "**************************************************************"
}

get_highest_ofp_version() {
    # if no protocol listed, default to OpenFlow14
    hex_ofp_version=$(cat $cmd_dir/ovs-ofctl_-t_5_--version | grep "OpenFlow versions" | grep -oP [0-9]*x[0-9]* | tail -1)
    version=${open_flow_protocols[$hex_ofp_version]}
    if [ -z "$version" ]; then
        echo "OpenFlow14"
    else
        echo $version
    fi
}

do_collect-sos() {
    OPTIND=1
    while getopts "oh" opt; do
        case ${opt} in
            h)
                usage
                exit 0
                ;;
        esac
    done
    shift $(((OPTIND -1)))

    if [ $# -lt 1 ]; then
        usage
        exit 1
    fi
    SOS=$1

    cp $SOS ./sos.tar.xz || error "SOS archive file not found. Please specify a <sosreport>.tar.xz archive"
    mkdir sos_report || true
    echo "Extracting sos report from '$SOS'..."
    tar -xf sos.tar.xz -C sos_report --strip-components 1 || error "cannot extract report from $SOS"
    rm sos.tar.xz

    cmd_dir=sos_report/sos_commands/openvswitch/

    # OVS 2.7 and earlier do not enable OpenFlow 1.4 (by default) and lack
    # other features needed to save and restore flows.
    case `cat $cmd_dir/ovs-appctl_version | sed 1q` in
    "ovs-vswitchd (Open vSwitch) 1."*.*)
    echo "Outdated ovs version (2.8 or higher required)"
        return
        ;;
    "ovs-vswitchd (Open vSwitch) 2."[0-7].*)
    echo "Outdated ovs version (2.8 or higher required)"
        return
        ;;
    esac

    save_dir=/tmp/ovs-save-dir
    mkdir $save_dir
    mkdir ${WORKDIR}/restore_flows
    bridges=$(cat sos_report/sos_commands/openvswitch/ovs-vsctl_-t_5_list-br)

    # get group, flow, and tlv dumps
    for file in $(ls $cmd_dir | grep ovs-ofctl_-O_OpenFlow[0-9]*_dump-flows_*); do
        cp $cmd_dir/$file $save_dir
    done

    for file in $(ls $cmd_dir | grep ovs-ofctl_-O_OpenFlow[0-9]*_dump-tlv-map_*); do
        cp $cmd_dir/$file $save_dir
    done

    for file in $(ls $cmd_dir | grep ovs-ofctl_-O_OpenFlow[0-9]*_dump-groups_*); do
        cp $cmd_dir/$file $save_dir
    done

    # apply ovs-save workarounds to current flows to allow for restoration
    for dump in $save_dir/*dump-flows*; do
        sed -i -e '/NXST_FLOW/d' \
            -e '/OFPST_FLOW/d' \
            -e 's/\(idle\|hard\)_age=[^,]*,//g' \
            -e 's/igmp/ip,nw_proto=2/g' \
            "$dump"
    done

    for dump in $save_dir/*dump-groups*; do
        sed -i -e '/^OFPST_GROUP_DESC/d' \
            -e '/^NXST_GROUP_DESC/d' \
            "$dump"
    done

    # If possible use OpenFlow 1.4 atomic bundle txn for flows and groups
    ofp_version=$(get_highest_ofp_version)
    [ ${ofp_version#OpenFlow} -ge 14 ] && bundle=" --bundle" || bundle=""

    # create restore.sh scrip
    for br in $bridges; do
        echo -n "ovs-ofctl add-tlv-map ${br} '" >> ${WORKDIR}/restore_flows/do_restore.sh
        cat $save_dir/ovs-ofctl_-O_OpenFlow[0-9]*_dump-tlv-map_$br | \
        awk '/^  *0x/ {if (cnt != 0) printf ","; \
            cnt++;printf "{class="$1",type="$2",len="$3"}->"$4}' >> ${WORKDIR}/restore_flows/do_restore.sh
        echo "'" >> ${WORKDIR}/restore_flows/do_restore.sh

        echo "ovs-ofctl -O $ofp_version add-groups ${br} \
                    \"$save_dir/ovs-ofctl_-O_${ofp_version}_dump-groups_$br\" ${bundle}" >> ${WORKDIR}/restore_flows/do_restore.sh

        echo "ovs-ofctl -O $ofp_version replace-flows ${br} \
                    \"$save_dir/ovs-ofctl_-O_${ofp_version}_dump-flows_$br\" ${bundle}" >> ${WORKDIR}/restore_flows/do_restore.sh
    done

    cp -r $save_dir/. ${WORKDIR}/restore_flows

    cat <<EOF > ${WORKDIR}/restore_flows/restore.sh
CURR_DIR=\$(dirname \$(realpath \$0))
ln -s \$CURR_DIR $save_dir
sh \$CURR_DIR/do_restore.sh
EOF


    # get the DB backup
    mkdir -p $VAR_RUN
    #cp $cmd_dir/ovsdb-client_backup /tmp/db.conf
    cp sos_report/etc/openvswitch/conf.db ${WORKDIR}/db.conf
    rm -rf sos_report
    rm -rf /tmp/ovs-save-dir

    echo ""
    echo ""
    echo "Offline OVS Debugging: data collected and stored in ${WORKDIR}"
    echo "**************************************************************"
}

start_ovsdb() {
    # run ovsdb-server
    docker kill ovsdb-server &>/dev/null || true
    docker rm ovsdb-server &>/dev/null || true
    docker run -d -p 127.0.0.1:6640:6640/tcp -v ${WORKDIR}/db.conf:/usr/local/var/run/openvswitch/db.backup -v ${VAR_RUN}:/usr/local/var/run/openvswitch/  --name ovsdb-server ovs-dbg ovsdb
    sleep 3
}

start_vswitchd() {
    # run ovs-vswitchd
    docker kill ovs-vswitchd &>/dev/null || true
    docker rm ovs-vswitchd &>/dev/null || true
    docker run -d -p 127.0.0.1:16640:6640/tcp -e RESTORE_DIR="/root/restore_flows" -v ${WORKDIR}/restore_flows:"/root/restore_flows" -v ${VAR_RUN}:/usr/local/var/run/openvswitch/ --name ovs-vswitchd --rm ovs-dbg vswitchd-dummy
    sleep 3
}

do_start() {
    local svc=${1-all}

    # Ensure ovs-dbg image is present
    docker inspect ovs-dbg 2>&1 >/dev/null || (
        echo "Failed to find a local container named ovs-dbg. Pulling from quay.io/amorenoz/ovs-dbg"
        docker pull quay.io/amorenoz/ovs-dbg && docker tag quay.io/amorenoz/ovs-dbg ovs-dbg
    )

    case ${svc} in
        all)
            start_ovsdb
            start_vswitchd
            ;;
        ovsdb)
            start_ovsdb
            ;;
        vswitchd)
            start_vswitchd
            ;;
        *)
            usage
            exit 1
    esac

    echo ""
    echo "Offline OVS Debugging started"
    echo "******************************"
    echo ""
    print_tools

}

print_tools() {
    echo "Working directory: $WORKDIR:"

    if [ $(find $VAR_RUN -name "ovs-vswitchd.*.ctl") ]; then
        vswitchd_ctl=$(ls -x $VAR_RUN/ovs-vswitchd.*.ctl)
        echo ""
        echo "openvswitch control found at ${vswitchd_ctl}"
        echo "You can run ovs-appctl commands as:"
        echo "   ovs-appctl --target=${vswitchd_ctl} [...]"
    fi

    if [ $(find $VAR_RUN -name "db.sock") ]; then
        ovsdb_sock=$(ls -x $VAR_RUN/db.sock)
        echo ""
        echo "OVSDB socket found at ${ovsdb_sock}"
        echo "You can run ovsdb commands such as:"
        echo "   ovs-vsctl --db unix:${ovsdb_sock} [...]"
        echo "   ovn-nbctl --db unix:${ovsdb_sock} [...]"
        echo "   ovn-sbctl --db unix:${ovsdb_sock} [...]"
        echo "   ovsdb-client ${ovsdb_sock} [...]"
    fi

    if [ $(find $VAR_RUN -name "*mgmt") ]; then
        ofproto_socks=$(ls -x $VAR_RUN/*.mgmt)
        echo ""
        echo "openflow bridge management sockets found at ${ofproto_socks}"
        echo "You can run ofproto commands such as:"
        for mgt in $(ls -x $VAR_RUN/*.mgmt); do
            echo "   ovs-ofctl [...] ${mgt}"
        done
    fi
}

while getopts ":hdw:" opt; do
    case ${opt} in
        h)
            usage
            exit 0
            ;;
        w)
            WORKDIR=$(realpath $OPTARG)
            VAR_RUN=${WORKDIR}/var-run
            ;;
        d)
            set -x
            ;;
    esac
done

shift $(((OPTIND -1)))
if [ $# -lt 1 ]; then
    usage
    exit 1
fi
CMD=$1
shift

mkdir -p ${WORKDIR}

case $CMD in
    collect-k8s)
        do_collect-k8s $@
        ;;
    collect-sos)
        do_collect-sos $@
        ;;
    collect-db)
        do_collect-db $@
        ;;
    build)
        do_build $@
        ;;
    start)
        do_start $@
        ;;
    print)
        print_tools
        ;;
    stop)
        do_stop $@
        ;;
    *)
        echo "Invalid command $CMD" 1>&2
        exit 1
        ;;
esac
